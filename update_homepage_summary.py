#!/usr/bin/env python3
"""
Update the homepage summary statistics in index.html
Based on the predictions generated by kronos-pipeline
"""

import json
import os
from pathlib import Path
from datetime import datetime
import re

def calculate_summary_stats():
    """Calculate summary statistics from all prediction JSON files"""
    data_dir = Path('/home/jarden/transformers-predictions/data')

    total_predictions = 0
    bullish_count = 0
    bearish_count = 0
    neutral_count = 0
    total_movement = 0

    # Process all prediction files
    json_files = list(data_dir.glob("*_ohlcv_prediction.json"))

    for json_file in json_files:
        try:
            with open(json_file, 'r') as f:
                data = json.load(f)

            if 'summary_stats' in data:
                stats = data['summary_stats']
                total_predictions += 1

                # Get price change percentage
                if 'price_change_percent' in stats:
                    change_pct = stats['price_change_percent']
                    total_movement += abs(change_pct)

                    # Classify direction
                    if 'direction' in stats:
                        direction = stats['direction']
                        if direction == 'Bullish':
                            bullish_count += 1
                        elif direction == 'Bearish':
                            bearish_count += 1
                        else:
                            neutral_count += 1
                    else:
                        # Fallback classification based on percentage
                        if change_pct > 1:
                            bullish_count += 1
                        elif change_pct < -1:
                            bearish_count += 1
                        else:
                            neutral_count += 1

        except Exception as e:
            print(f"Error processing {json_file.name}: {e}")
            continue

    # Calculate average movement
    avg_movement = total_movement / total_predictions if total_predictions > 0 else 0

    return {
        'total_predictions': total_predictions,
        'bullish_count': bullish_count,
        'bearish_count': bearish_count,
        'neutral_count': neutral_count,
        'avg_movement': avg_movement,
        'timestamp': datetime.now().isoformat()
    }

def update_index_html(stats):
    """Update the index.html file with new statistics"""
    index_path = Path('/home/jarden/transformers-predictions/dist/index.html')

    with open(index_path, 'r') as f:
        html_content = f.read()

    # Update total predictions
    html_content = re.sub(
        r'<div class="card-number" id="totalPredictions">[^<]+</div>',
        f'<div class="card-number" id="totalPredictions">{stats["total_predictions"]:,}</div>',
        html_content
    )

    # Update average movement
    html_content = re.sub(
        r'<div class="card-number" id="avgMovement">[^<]+</div>',
        f'<div class="card-number" id="avgMovement">{stats["avg_movement"]:.1f}%</div>',
        html_content
    )

    # Update bullish count
    html_content = re.sub(
        r'<div class="card-number" id="bullishCount">[^<]+</div>',
        f'<div class="card-number" id="bullishCount">{stats["bullish_count"]:,}</div>',
        html_content
    )

    # Update bearish count
    html_content = re.sub(
        r'<div class="card-number" id="bearishCount">[^<]+</div>',
        f'<div class="card-number" id="bearishCount">{stats["bearish_count"]:,}</div>',
        html_content
    )

    # Update the subtitle to reflect the prediction dates
    html_content = re.sub(
        r'<p class="summary-subtitle">AI predictions across available tickers</p>',
        '<p class="summary-subtitle">AI predictions for Oct 6-10, 2025 (120-day lookback to Oct 3)</p>',
        html_content
    )

    # Save updated HTML
    with open(index_path, 'w') as f:
        f.write(html_content)

    print(f"Updated index.html with new statistics")
    return True

def generate_top_predictions():
    """Generate list of top bullish and bearish predictions for display"""
    data_dir = Path('/home/jarden/transformers-predictions/data')

    predictions = []

    # Collect all predictions
    json_files = list(data_dir.glob("*_ohlcv_prediction.json"))

    for json_file in json_files:
        try:
            ticker = json_file.stem.replace('_ohlcv_prediction', '')
            with open(json_file, 'r') as f:
                data = json.load(f)

            if 'summary_stats' in data:
                stats = data['summary_stats']
                if 'price_change_percent' in stats:
                    predictions.append({
                        'ticker': ticker,
                        'change_pct': stats['price_change_percent'],
                        'direction': stats.get('direction', 'Neutral'),
                        'confidence': stats.get('confidence', 85)
                    })
        except Exception:
            continue

    # Sort by absolute change percentage
    predictions.sort(key=lambda x: abs(x['change_pct']), reverse=True)

    # Get top 6 predictions
    top_predictions = predictions[:6]

    return top_predictions

def update_prediction_grid(top_predictions):
    """Update the prediction grid in index.html"""
    index_path = Path('/home/jarden/transformers-predictions/dist/index.html')

    with open(index_path, 'r') as f:
        html_content = f.read()

    # Generate new grid HTML
    grid_html = ''
    for pred in top_predictions:
        direction_class = 'bullish' if pred['change_pct'] > 0 else 'bearish'
        direction_symbol = '↗' if pred['change_pct'] > 0 else '↘'
        sign = '+' if pred['change_pct'] > 0 else ''

        grid_html += f'''                        <div class="prediction-item {direction_class}" onclick="searchTicker('{pred["ticker"]}')">
                            <div class="pred-ticker">{pred['ticker']}</div>
                            <div class="pred-direction">{direction_symbol} {sign}{pred['change_pct']:.1f}%</div>
                            <div class="pred-confidence">{pred['confidence']:.1f}%</div>
                        </div>\n'''

    # Replace the predictions grid
    pattern = r'<div class="predictions-grid" id="predictionsGrid">.*?</div>\s*</div>'
    replacement = f'''<div class="predictions-grid" id="predictionsGrid">
{grid_html}                    </div>
                </div>'''

    html_content = re.sub(pattern, replacement, html_content, flags=re.DOTALL)

    # Save updated HTML
    with open(index_path, 'w') as f:
        f.write(html_content)

    print(f"Updated prediction grid with top {len(top_predictions)} predictions")
    return True

def main():
    print("="*50)
    print("Updating Homepage Summary Statistics")
    print("="*50)

    # Calculate summary statistics
    print("Calculating summary statistics...")
    stats = calculate_summary_stats()

    print(f"\nSummary Statistics:")
    print(f"  Total Predictions: {stats['total_predictions']:,}")
    print(f"  Bullish: {stats['bullish_count']:,}")
    print(f"  Bearish: {stats['bearish_count']:,}")
    print(f"  Neutral: {stats['neutral_count']:,}")
    print(f"  Avg Movement: {stats['avg_movement']:.1f}%")

    # Update index.html with statistics
    print("\nUpdating index.html...")
    update_index_html(stats)

    # Generate and update top predictions
    print("Generating top predictions...")
    top_predictions = generate_top_predictions()

    if top_predictions:
        print(f"Found {len(top_predictions)} top predictions")
        update_prediction_grid(top_predictions)

    # Save summary to JSON for reference
    summary_file = Path('/home/jarden/transformers-predictions/data/homepage_summary.json')
    with open(summary_file, 'w') as f:
        json.dump({
            'statistics': stats,
            'top_predictions': top_predictions
        }, f, indent=2)

    print(f"\nSummary saved to {summary_file}")
    print("Homepage update complete!")

if __name__ == "__main__":
    main()